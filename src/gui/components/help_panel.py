# File: src/gui/components/help_panel.py
"""Help panel component for the Enhanced Soldier Report System"""

import tkinter as tk
from tkinter import ttk


class HelpPanel:
    """Help panel component with comprehensive documentation"""
    
    def __init__(self, parent):
        self.parent = parent
        self.setup_help_tab()
    
    def setup_help_tab(self):
        """Setup the enhanced help tab with comprehensive documentation based on interface design specifications"""
        
        # Create main container with scrollable content
        main_container = tk.Frame(self.parent, bg='#ecf0f1')
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Create canvas and scrollbar for scrollable content
        canvas = tk.Canvas(main_container, bg='#ecf0f1', highlightthickness=0)
        v_scrollbar = ttk.Scrollbar(main_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#ecf0f1')
        
        # Configure scrolling
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=v_scrollbar.set)
        
        # Pack canvas and scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        v_scrollbar.pack(side="right", fill="y")
        
        # Bind mousewheel to canvas
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # Header Section
        self._create_help_header(scrollable_frame)
        
        # Main content sections
        self._create_assessment_overview(scrollable_frame)
        self._create_data_models_section(scrollable_frame)
        self._create_analysis_framework_section(scrollable_frame)
        self._create_performance_scoring_section(scrollable_frame)
        self._create_safety_monitoring_section(scrollable_frame)
        self._create_report_configuration_section(scrollable_frame)
        self._create_troubleshooting_section(scrollable_frame)
        self._create_interface_patterns_section(scrollable_frame)
        
        # Footer
        self._create_help_footer(scrollable_frame)

    def _create_help_header(self, parent):
        """Create the help section header"""
        header_frame = tk.Frame(parent, bg='#34495e', relief='raised', bd=2)
        header_frame.pack(fill='x', pady=(0, 20))
        
        # Main title
        title_label = tk.Label(header_frame, 
                              text="üéñÔ∏è Enhanced Soldier Report System - Complete User Guide",
                              font=('Arial', 16, 'bold'),
                              fg='white', bg='#34495e')
        title_label.pack(pady=(15, 5))
        
        # Subtitle
        subtitle_label = tk.Label(header_frame,
                                 text="Comprehensive Military Performance Analysis & Safety Monitoring",
                                 font=('Arial', 11),
                                 fg='#bdc3c7', bg='#34495e')
        subtitle_label.pack(pady=(0, 10))
        
        # Version info
        version_label = tk.Label(header_frame,
                                text="Version 2.0 | Interface Design v2.0 | August 2025",
                                font=('Arial', 9),
                                fg='#95a5a6', bg='#34495e')
        version_label.pack(pady=(0, 15))

    def _create_assessment_overview(self, parent):
        """Create assessment criteria overview section"""
        section_frame = self._create_section_frame(parent, "üéØ ASSESSMENT CRITERIA OVERVIEW")
        
        content = """
üìä PERFORMANCE SCORING SYSTEM (0-100 Points)

The Enhanced Soldier Report System uses a comprehensive multi-factor scoring algorithm:

üîπ PHYSICAL PERFORMANCE (30-40% of score)
   ‚Ä¢ Activity Level: Step count and movement patterns
   ‚Ä¢ Posture Analysis: Battle positioning and stability  
   ‚Ä¢ Fall Incidents: Safety and coordination assessment
   ‚Ä¢ Mission Duration: Endurance and persistence metrics

üîπ EQUIPMENT READINESS (20-25% of score)
   ‚Ä¢ Battery Management: Power conservation and planning
   ‚Ä¢ Communication Quality: Signal strength and connectivity
   ‚Ä¢ Equipment Failures: Reliability and maintenance

üîπ COMBAT EFFECTIVENESS (25-30% of score)
   ‚Ä¢ Engagement Statistics: Active participation in scenarios
   ‚Ä¢ Casualty Status: Mission outcome and survival
   ‚Ä¢ Tactical Positioning: Strategic movement and positioning

üîπ SAFETY COMPLIANCE (15-20% of score)
   ‚Ä¢ Medical Alert Response: Following safety protocols
   ‚Ä¢ Environmental Awareness: Temperature and stress management
   ‚Ä¢ Risk Mitigation: Proactive safety measures

‚öîÔ∏è BATTLE CONTEXT ANALYSIS
The system distinguishes between different mission phases:
   ‚Ä¢ Pre-Battle Period: Setup and preparation assessment
   ‚Ä¢ Active Battle Period: Last 45 minutes of high-intensity activity
   ‚Ä¢ Post-Battle Period: Recovery and debrief analysis

Different scoring weightings apply to each phase based on operational priorities.
        """
        
        self._add_content_text(section_frame, content)

    def _create_data_models_section(self, parent):
        """Create data models documentation section"""
        section_frame = self._create_section_frame(parent, "üìã DATA MODELS & STRUCTURE")
        
        content = """
üóÇÔ∏è CORE DATA STRUCTURES

üìå SoldierIdentity (Immutable)
   ‚Ä¢ Callsign: Primary identifier for soldier
   ‚Ä¢ Player ID: System-generated unique identifier  
   ‚Ä¢ Squad/Platoon: Unit assignment and hierarchy

üìå SoldierDataRecord (Complete Profile)
   ‚Ä¢ Physical Metrics: Movement, posture, activity levels
   ‚Ä¢ Physiological Metrics: Heart rate zones, temperature
   ‚Ä¢ Equipment Metrics: Battery, communication, failures
   ‚Ä¢ Combat Metrics: Engagements, weapons, casualties
   ‚Ä¢ Data Quality: Completeness and reliability scores

üìä METRICS CATEGORIES

üèÉ PhysicalMetrics
   ‚Ä¢ Step counting and movement analysis
   ‚Ä¢ Posture distribution and stability assessment
   ‚Ä¢ Fall detection and incident tracking
   ‚Ä¢ Activity level categorization

‚ù§Ô∏è PhysiologicalMetrics  
   ‚Ä¢ Heart rate zones and statistical analysis
   ‚Ä¢ Temperature monitoring and stress detection
   ‚Ä¢ Abnormal reading flags and medical alerts
   ‚Ä¢ Physiological stress indicators

üîã EquipmentMetrics
   ‚Ä¢ Battery level monitoring and optimization
   ‚Ä¢ Communication quality (RSSI) assessment
   ‚Ä¢ Equipment failure tracking and prediction
   ‚Ä¢ Risk level assessment for mission readiness

‚öîÔ∏è CombatMetrics
   ‚Ä¢ Casualty status tracking and analysis
   ‚Ä¢ Engagement statistics and effectiveness
   ‚Ä¢ Weapon and munition data analysis
   ‚Ä¢ Survival and tactical effectiveness metrics
        """
        
        self._add_content_text(section_frame, content)

    def _create_analysis_framework_section(self, parent):
        """Create analysis framework documentation"""
        section_frame = self._create_section_frame(parent, "üî¨ ANALYSIS FRAMEWORK")
        
        content = """
üéØ ANALYSIS STATUS LEVELS
   ‚Ä¢ PENDING: Analysis queued for processing
   ‚Ä¢ IN_PROGRESS: Active analysis in progress
   ‚Ä¢ COMPLETED: Analysis finished successfully
   ‚Ä¢ FAILED: Analysis encountered errors
   ‚Ä¢ CANCELLED: Analysis terminated by user

‚ö†Ô∏è RISK LEVEL ASSESSMENT
   ‚Ä¢ LOW: Minimal risk, standard monitoring
   ‚Ä¢ MODERATE: Increased attention recommended
   ‚Ä¢ HIGH: Immediate supervisor notification
   ‚Ä¢ CRITICAL: Emergency response required

üèÜ PERFORMANCE RATING SCALE
   ‚Ä¢ EXCELLENT (90-100): Exemplary performance, commendation worthy
   ‚Ä¢ GOOD (80-89): Above average, meets high standards
   ‚Ä¢ SATISFACTORY (70-79): Meets basic requirements
   ‚Ä¢ NEEDS_IMPROVEMENT (60-69): Below standard, training recommended
   ‚Ä¢ CRITICAL (<60): Immediate intervention required

üìà SPECIALIZED ANALYSIS MODULES

‚ù§Ô∏è HeartRateAnalysis
   ‚Ä¢ Statistical summaries with percentiles (5th, 25th, 50th, 75th, 95th)
   ‚Ä¢ Heart rate zone distribution analysis
   ‚Ä¢ Abnormal reading detection and flagging
   ‚Ä¢ Risk assessment with automated medical flags
   ‚Ä¢ Trend analysis for performance optimization

üèÉ PhysicalPerformanceAnalysis
   ‚Ä¢ Step statistics and activity level assessment
   ‚Ä¢ Movement pattern analysis and optimization
   ‚Ä¢ Fall incident tracking and prevention
   ‚Ä¢ Performance rating assignment with detailed breakdown

üõ°Ô∏è SafetyAnalysis
   ‚Ä¢ Overall safety score calculation (0-100)
   ‚Ä¢ Multi-dimensional risk assessment matrix
   ‚Ä¢ Temperature stress monitoring and alerts
   ‚Ä¢ Medical recommendations and action items
   ‚Ä¢ Immediate intervention requirements
        """
        
        self._add_content_text(section_frame, content)

    def _create_performance_scoring_section(self, parent):
        """Create performance scoring documentation"""
        section_frame = self._create_section_frame(parent, "üìä PERFORMANCE SCORING METHODOLOGY")
        
        content = """
üéñÔ∏è COMPREHENSIVE SCORING ALGORITHM

The system uses a 100-point scale with the following breakdown:

üìç STARTING BASELINE: 100 Points
All soldiers begin with perfect score, points deducted for performance issues.

‚ûñ PERFORMANCE DEDUCTIONS

üîπ Activity Level Penalties
   ‚Ä¢ Low Activity (<50 avg steps): -15 points
   ‚Ä¢ Moderate Activity (50-100 avg steps): -10 points  
   ‚Ä¢ Insufficient movement patterns: -5 points

üîπ Mission Outcome Penalties  
   ‚Ä¢ WOUNDED status: -10 points
   ‚Ä¢ KIA (Killed in Action): -20 points
   ‚Ä¢ Mission failure incidents: -5 to -15 points

üîπ Equipment Readiness Penalties
   ‚Ä¢ Critical battery (<20%): -15 points
   ‚Ä¢ Low battery (20-40%): -8 points
   ‚Ä¢ Poor communication quality: -5 points
   ‚Ä¢ Equipment failures: -3 to -10 points

üîπ Safety Compliance Penalties
   ‚Ä¢ Medical alert incidents: -3 points each
   ‚Ä¢ Safety protocol violations: -5 to -10 points
   ‚Ä¢ Risk mitigation failures: -5 points

‚ûï PERFORMANCE BONUSES

üîπ Excellence Bonuses
   ‚Ä¢ Excellent communication quality: +3 points
   ‚Ä¢ Active combat engagement: +1 to +5 points
   ‚Ä¢ Leadership demonstration: +2 to +5 points
   ‚Ä¢ Equipment optimization: +1 to +3 points

üîπ Mission Achievement Bonuses
   ‚Ä¢ Objective completion: +2 to +8 points
   ‚Ä¢ Team coordination: +1 to +5 points
   ‚Ä¢ Tactical innovation: +2 to +5 points

üéØ FINAL SCORE CALCULATION
Final Score = 100 + Bonuses - Deductions (Minimum: 0, Maximum: 110)

üìã PERFORMANCE BREAKDOWN TRACKING
Every report includes detailed breakdown showing:
   ‚Ä¢ Starting score: 100 points
   ‚Ä¢ Total deductions with specific reasons
   ‚Ä¢ Total bonuses with achievement details  
   ‚Ä¢ Final calculated score
   ‚Ä¢ Performance rating assignment
        """
        
        self._add_content_text(section_frame, content)

    def _create_safety_monitoring_section(self, parent):
        """Create safety monitoring documentation"""
        section_frame = self._create_section_frame(parent, "üõ°Ô∏è SAFETY MONITORING SYSTEM")
        
        content = """
üí° MEDICAL MONITORING PHILOSOPHY

The system prioritizes soldier health and safety above performance metrics:

‚ù§Ô∏è HEART RATE MONITORING (Medical Focus)
   ‚Ä¢ Normal Range: 60-190 BPM (NO performance penalty)
   ‚Ä¢ >190 BPM: MEDICAL ALERT (immediate evaluation, no penalty)
   ‚Ä¢ <60 BPM: Medical evaluation recommended (no penalty)
   ‚Ä¢ Heart rate used for SAFETY, not performance punishment

üå°Ô∏è TEMPERATURE STRESS MONITORING
   ‚Ä¢ Normal Range: 95-100¬∞F
   ‚Ä¢ >104¬∞F: HEAT EMERGENCY - immediate cooling protocols
   ‚Ä¢ >100¬∞F: Heat stress detected - increased monitoring
   ‚Ä¢ <95¬∞F: Cold stress - warming protocols initiated

üö® AUTOMATED ALERT SYSTEM

‚ö†Ô∏è MEDICAL ALERTS (No Performance Impact)
   ‚Ä¢ Physiological stress indicators
   ‚Ä¢ Abnormal vital sign patterns
   ‚Ä¢ Environmental stress conditions
   ‚Ä¢ Equipment failure medical risks

üî¥ CRITICAL ALERTS (Immediate Response)
   ‚Ä¢ Cardiac emergency indicators (HR >190 BPM)
   ‚Ä¢ Heat stroke risk (Temp >104¬∞F)
   ‚Ä¢ Equipment failure in hazardous conditions
   ‚Ä¢ Fall detection with no response

üìã MEDICAL RECOMMENDATIONS ENGINE

The system generates specific medical recommendations:

üîπ IMMEDIATE ACTION REQUIRED
   ‚Ä¢ Emergency medical evaluation
   ‚Ä¢ Environmental hazard mitigation
   ‚Ä¢ Equipment replacement/repair
   ‚Ä¢ Mission modification recommendations

üîπ ROUTINE MONITORING
   ‚Ä¢ Increased check intervals
   ‚Ä¢ Preventive care scheduling
   ‚Ä¢ Training recommendations
   ‚Ä¢ Equipment optimization

üîπ PERFORMANCE OPTIMIZATION
   ‚Ä¢ Physical conditioning programs
   ‚Ä¢ Stress management techniques
   ‚Ä¢ Equipment training needs
   ‚Ä¢ Tactical skill development

üéñÔ∏è SAFETY-FIRST SCORING PRINCIPLE
Performance scores reflect controllable factors:
   ‚úÖ Effort, preparation, decision-making
   ‚ùå NOT medical conditions or physiological limits
        """
        
        self._add_content_text(section_frame, content)

    def _create_report_configuration_section(self, parent):
        """Create report configuration documentation"""
        section_frame = self._create_section_frame(parent, "üìÑ REPORT CONFIGURATION")
        
        content = """
üìã REPORT TYPES AVAILABLE

üîπ INDIVIDUAL_SOLDIER
   ‚Ä¢ Comprehensive single-soldier analysis
   ‚Ä¢ Detailed performance breakdown
   ‚Ä¢ Medical monitoring summary
   ‚Ä¢ Tactical assessment and recommendations

üîπ SQUAD_SUMMARY  
   ‚Ä¢ Multi-soldier comparative analysis
   ‚Ä¢ Squad-level performance metrics
   ‚Ä¢ Team coordination assessment
   ‚Ä¢ Leadership identification

üîπ BATTLE_ANALYSIS
   ‚Ä¢ Mission-wide performance overview
   ‚Ä¢ Tactical effectiveness assessment
   ‚Ä¢ Lessons learned compilation
   ‚Ä¢ Strategic recommendations

üîπ SAFETY_REPORT
   ‚Ä¢ Medical incident analysis
   ‚Ä¢ Risk assessment summary
   ‚Ä¢ Safety protocol compliance
   ‚Ä¢ Prevention recommendations

üîπ PERFORMANCE_COMPARISON
   ‚Ä¢ Cross-mission analysis
   ‚Ä¢ Trend identification
   ‚Ä¢ Improvement tracking
   ‚Ä¢ Benchmark comparisons
        """
        
        self._add_content_text(section_frame, content)

    def _create_troubleshooting_section(self, parent):
        """Create troubleshooting documentation"""
        section_frame = self._create_section_frame(parent, "üîß TROUBLESHOOTING GUIDE")
        
        content = """
‚ùó COMMON ISSUES & SOLUTIONS

üîπ DATA LOADING PROBLEMS
   ‚Ä¢ File Format: Ensure CSV with proper column headers
   ‚Ä¢ Column Mapping: Verify Fort Moore data format compatibility
   ‚Ä¢ File Size: Large files may require chunked processing
   ‚Ä¢ Encoding: Check UTF-8 encoding for special characters

üîπ ANALYSIS FAILURES
   ‚Ä¢ Data Quality: Minimum 70% data completeness required
   ‚Ä¢ Time Coverage: Ensure sufficient data duration
   ‚Ä¢ Missing Columns: Critical columns must be present
   ‚Ä¢ Data Types: Verify numeric data in appropriate columns

üîπ REPORT GENERATION ISSUES
   ‚Ä¢ Memory Limits: Large batches may need smaller chunks
   ‚Ä¢ Template Errors: Check template syntax and references
   ‚Ä¢ Output Directory: Ensure write permissions
   ‚Ä¢ File Conflicts: Resolve naming conflicts with existing files
        """
        
        self._add_content_text(section_frame, content)

    def _create_interface_patterns_section(self, parent):
        """Create interface patterns documentation"""
        section_frame = self._create_section_frame(parent, "üéõÔ∏è INTERFACE DESIGN PATTERNS")
        
        content = """
üèóÔ∏è SYSTEM ARCHITECTURE OVERVIEW

üìã Separation of Concerns
   ‚Ä¢ Data Models: Pure data structures with validation
   ‚Ä¢ Analysis Logic: Separate processing components  
   ‚Ä¢ Controller Layer: User interface coordination
   ‚Ä¢ Report Generation: Configurable presentation layer
   ‚Ä¢ Configuration: Externalized settings and templates

üîÑ Event-Driven Architecture
   ‚Ä¢ Centralized event bus for component communication
   ‚Ä¢ Type-safe event classes with structured data
   ‚Ä¢ Priority-based event handling system
   ‚Ä¢ Asynchronous processing with thread pool execution
   ‚Ä¢ Comprehensive error isolation and recovery
        """
        
        self._add_content_text(section_frame, content)

    def _create_help_footer(self, parent):
        """Create help section footer"""
        footer_frame = tk.Frame(parent, bg='#34495e', relief='raised', bd=2)
        footer_frame.pack(fill='x', pady=(20, 0))
        
        # System info
        system_info = tk.Label(footer_frame,
                              text="üéñÔ∏è Enhanced Individual Soldier Report System",
                              font=('Arial', 12, 'bold'),
                              fg='white', bg='#34495e')
        system_info.pack(pady=(10, 5))
        
        # Technical details
        tech_info = tk.Label(footer_frame,
                            text="Advanced Analytics for Military Operations | Controller Architecture v2.0",
                            font=('Arial', 10),
                            fg='#bdc3c7', bg='#34495e')
        tech_info.pack(pady=(0, 5))
        
        # Classification
        classification = tk.Label(footer_frame,
                                 text="FOR OFFICIAL USE ONLY (FOUO) | Export Controlled",
                                 font=('Arial', 9, 'bold'),
                                 fg='#e74c3c', bg='#34495e')
        classification.pack(pady=(0, 10))

    def _create_section_frame(self, parent, title):
        """Create a standardized section frame with title"""
        # Section container
        section_frame = tk.Frame(parent, bg='#ecf0f1')
        section_frame.pack(fill='x', pady=(0, 15))
        
        # Section title
        title_frame = tk.Frame(section_frame, bg='#3498db', relief='raised', bd=1)
        title_frame.pack(fill='x', pady=(0, 10))
        
        title_label = tk.Label(title_frame, text=title,
                              font=('Arial', 12, 'bold'),
                              fg='white', bg='#3498db')
        title_label.pack(pady=8)
        
        # Content container
        content_frame = tk.Frame(section_frame, bg='white', relief='solid', bd=1)
        content_frame.pack(fill='x', padx=5)
        
        return content_frame

    def _add_content_text(self, parent, content):
        """Add formatted content text to a section"""
        text_widget = tk.Text(parent, 
                             font=('Courier', 9),
                             bg='white', fg='#2c3e50',
                             wrap='word', 
                             state='normal',
                             relief='flat',
                             padx=15, pady=15,
                             height=content.count('\n') + 2)
        
        text_widget.pack(fill='x', padx=5, pady=5)
        
        # Insert content
        text_widget.insert('1.0', content.strip())
        
        # Apply formatting for headings and special text
        lines = content.strip().split('\n')
        for i, line in enumerate(lines, 1):
            if line.strip().startswith('üìä') or line.strip().startswith('üîπ') or line.strip().startswith('üéØ'):
                text_widget.tag_add('heading', f'{i}.0', f'{i}.end')
            elif line.strip().startswith('   ‚Ä¢'):
                text_widget.tag_add('bullet', f'{i}.0', f'{i}.end')
            elif '‚ù§Ô∏è' in line or 'üå°Ô∏è' in line or 'üö®' in line:
                text_widget.tag_add('important', f'{i}.0', f'{i}.end')
        
        # Configure tags
        text_widget.tag_config('heading', font=('Arial', 10, 'bold'), foreground='#2c3e50')
        text_widget.tag_config('bullet', font=('Courier', 9), foreground='#34495e', lmargin1=20)
        text_widget.tag_config('important', font=('Arial', 9, 'bold'), foreground='#e74c3c')
        
        # Make read-only
        text_widget.config(state='disabled')
        
        return text_widget